{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\nvar getStride = require( '@stdlib/ndarray-base-stride' );\nvar getOffset = require( '@stdlib/ndarray-base-offset' );\nvar getData = require( '@stdlib/ndarray-base-data-buffer' );\nvar ndarraylike2scalar = require( '@stdlib/ndarray-base-ndarraylike2scalar' );\nvar strided = require( '@stdlib/stats-strided-sztest2' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two one-dimensional single-precision floating-point ndarrays.\n*\n* ## Notes\n*\n* -   The function expects the following ndarrays in order:\n*\n*     -   first one-dimensional input ndarray.\n*     -   second one-dimensional input ndarray.\n*     -   a zero-dimensional output ndarray containing a results object.\n*     -   a zero-dimensional ndarray specifying the alternative hypothesis.\n*     -   a zero-dimensional ndarray specifying the significance level.\n*     -   a zero-dimensional ndarray specifying the difference in means under the null hypothesis.\n*     -   a zero-dimensional ndarray specifying the known standard deviation of the first one-dimensional input ndarray.\n*     -   a zero-dimensional ndarray specifying the known standard deviation of the second one-dimensional input ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* var Float32Results = require( '@stdlib/stats-base-ztest-two-sample-results-float32' );\n* var resolveEnum = require( '@stdlib/stats-base-ztest-alternative-resolve-enum' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var Float32Array = require( '@stdlib/array-float32' );\n* var scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* var opts = {\n*     'dtype': 'float32'\n* };\n*\n* // Define one-dimensional input ndarrays:\n* var xbuf = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var x = new ndarray( opts.dtype, xbuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n* var y = new ndarray( opts.dtype, ybuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the difference in means under the null hypothesis:\n* var diff = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviations:\n* var sigmax = scalar2ndarray( 1.0, opts );\n* var sigmay = scalar2ndarray( 2.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float32Results );\n* var out = new ndarray( 'generic', new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = sztest2( [ x, y, out, alt, alpha, diff, sigmax, sigmay ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\nfunction sztest2( arrays ) {\n\tvar sigmax;\n\tvar sigmay;\n\tvar alpha;\n\tvar diff;\n\tvar alt;\n\tvar out;\n\tvar x;\n\tvar y;\n\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tout = ndarraylike2scalar( arrays[ 2 ] );\n\n\talt = ndarraylike2scalar( arrays[ 3 ] );\n\talpha = ndarraylike2scalar( arrays[ 4 ] );\n\tdiff = ndarraylike2scalar( arrays[ 5 ] );\n\tsigmax = ndarraylike2scalar( arrays[ 6 ] );\n\tsigmay = ndarraylike2scalar( arrays[ 7 ] );\n\n\tstrided( numelDimension( x, 0 ), numelDimension( y, 0 ), alt, alpha, diff, sigmax, getData( x ), getStride( x, 0 ), getOffset( x ), sigmay, getData( y ), getStride( y, 0 ), getOffset( y ), out ); // eslint-disable-line max-len\n\n\treturn arrays[ 2 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = sztest2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample Z-test for two one-dimensional single-precision floating-point ndarrays.\n*\n* @module @stdlib/stats-base-ndarray-sztest2\n*\n* @example\n* var Float32Results = require( '@stdlib/stats-base-ztest-two-sample-results-float32' );\n* var resolveEnum = require( '@stdlib/stats-base-ztest-alternative-resolve-enum' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var Float32Array = require( '@stdlib/array-float32' );\n* var scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var sztest2 = require( '@stdlib/stats-base-ndarray-sztest2' );\n*\n* var opts = {\n*     'dtype': 'float32'\n* };\n*\n* // Define one-dimensional input ndarrays:\n* var xbuf = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var x = new ndarray( opts.dtype, xbuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n* var y = new ndarray( opts.dtype, ybuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the difference in means under the null hypothesis:\n* var diff = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviations:\n* var sigmax = scalar2ndarray( 1.0, opts );\n* var sigmay = scalar2ndarray( 2.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float32Results );\n* var out = new ndarray( 'generic', new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = sztest2( [ x, y, out, alt, alpha, diff, sigmax, sigmay ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAiB,QAAS,sCAAuC,EACjEC,EAAY,QAAS,6BAA8B,EACnDC,EAAY,QAAS,6BAA8B,EACnDC,EAAU,QAAS,kCAAmC,EACtDC,EAAqB,QAAS,yCAA0C,EACxEC,EAAU,QAAS,+BAAgC,EAAE,QAoEzD,SAASC,EAASC,EAAS,CAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAAD,EAAIP,EAAQ,CAAE,EACdQ,EAAIR,EAAQ,CAAE,EACdM,EAAMT,EAAoBG,EAAQ,CAAE,CAAE,EAEtCK,EAAMR,EAAoBG,EAAQ,CAAE,CAAE,EACtCG,EAAQN,EAAoBG,EAAQ,CAAE,CAAE,EACxCI,EAAOP,EAAoBG,EAAQ,CAAE,CAAE,EACvCC,EAASJ,EAAoBG,EAAQ,CAAE,CAAE,EACzCE,EAASL,EAAoBG,EAAQ,CAAE,CAAE,EAEzCF,EAASL,EAAgBc,EAAG,CAAE,EAAGd,EAAgBe,EAAG,CAAE,EAAGH,EAAKF,EAAOC,EAAMH,EAAQL,EAASW,CAAE,EAAGb,EAAWa,EAAG,CAAE,EAAGZ,EAAWY,CAAE,EAAGL,EAAQN,EAASY,CAAE,EAAGd,EAAWc,EAAG,CAAE,EAAGb,EAAWa,CAAE,EAAGF,CAAI,EAE1LN,EAAQ,CAAE,CAClB,CAKAR,EAAO,QAAUO,IClDjB,IAAIU,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "numelDimension", "getStride", "getOffset", "getData", "ndarraylike2scalar", "strided", "sztest2", "arrays", "sigmax", "sigmay", "alpha", "diff", "alt", "out", "x", "y", "main"]
}
